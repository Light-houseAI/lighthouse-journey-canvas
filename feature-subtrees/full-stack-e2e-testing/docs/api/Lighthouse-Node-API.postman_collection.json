{
  "info": {
    "name": "Lighthouse Node Management API",
    "description": "Clean CRUD-only API collection for managing career journey nodes including jobs, education, projects, actions, events, and career transitions.",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script for authentication",
          "const token = pm.environment.get('authToken');",
          "if (!token) {",
          "  console.log('Warning: No auth token found. Please set authToken in environment.');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Common test assertions",
          "pm.test('Response status code should be successful', function () {",
          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
          "});",
          "",
          "pm.test('Response should have success property', function () {",
          "  const jsonData = pm.response.json();",
          "  if (pm.response.code !== 204) {",
          "    pm.expect(jsonData).to.have.property('success');",
          "  }",
          "});",
          "",
          "pm.test('Response time should be less than 2000ms', function () {",
          "  pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{apiBaseUrl}}",
      "type": "string"
    },
    {
      "key": "profileId",
      "value": "{{profileId}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signin",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "signin"]
            },
            "description": "Login to get authentication token"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Extract and save auth token if login is successful",
                  "if (pm.response.code === 200) {",
                  "  const jsonData = pm.response.json();",
                  "  if (jsonData.success && jsonData.data && jsonData.data.token) {",
                  "    pm.environment.set('authToken', jsonData.data.token);",
                  "    console.log('Auth token saved to environment');",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            },
            "description": "Get current authenticated user information"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('User info retrieved', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Extract and save profile ID if available",
                  "if (pm.response.code === 200) {",
                  "  const jsonData = pm.response.json();",
                  "  if (jsonData.success && jsonData.data && jsonData.data.profileId) {",
                  "    pm.environment.set('profileId', jsonData.data.profileId.toString());",
                  "    console.log('Profile ID saved to environment:', jsonData.data.profileId);",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        }
      ],
      "description": "Authentication endpoints for login and user management"
    },
    {
      "name": "Jobs",
      "item": [
        {
          "name": "List Jobs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/jobs?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "jobs"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number (default: 1)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page (default: 10, max: 100)"
                }
              ]
            },
            "description": "Get all job records for a profile with pagination"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/jobs",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "profiles", "{{profileId}}", "jobs"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"job-1\",\n      \"type\": \"job\",\n      \"title\": \"Senior Software Engineer\",\n      \"description\": \"Led development of microservices architecture\",\n      \"company\": \"Google\",\n      \"position\": \"Senior Software Engineer\",\n      \"startDate\": \"2022-01-15\",\n      \"endDate\": \"2023-12-31\",\n      \"location\": \"Mountain View, CA\",\n      \"employmentType\": \"full-time\",\n      \"technologies\": [\"TypeScript\", \"Node.js\", \"Kubernetes\"],\n      \"achievements\": [\"Reduced API latency by 40%\"],\n      \"createdAt\": \"2024-01-01T00:00:00Z\",\n      \"updatedAt\": \"2024-01-01T00:00:00Z\"\n    }\n  ],\n  \"meta\": {\n    \"total\": 5,\n    \"page\": 1,\n    \"limit\": 10,\n    \"totalPages\": 1\n  }\n}"
            }
          ]
        },
        {
          "name": "Create Job",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Senior Software Engineer\",\n  \"description\": \"Leading development of scalable web applications\",\n  \"company\": \"TechCorp Inc.\",\n  \"position\": \"Senior Software Engineer\",\n  \"startDate\": \"2023-01-15\",\n  \"endDate\": null,\n  \"location\": \"San Francisco, CA\",\n  \"employmentType\": \"full-time\",\n  \"responsibilities\": [\n    \"Lead team of 4 developers\",\n    \"Architect microservices solutions\",\n    \"Mentored junior developers\"\n  ],\n  \"achievements\": [\n    \"Improved system performance by 35%\",\n    \"Delivered 3 major features ahead of schedule\"\n  ],\n  \"technologies\": [\"TypeScript\", \"React\", \"Node.js\", \"PostgreSQL\"],\n  \"teamSize\": 4,\n  \"salary\": {\n    \"amount\": 150000,\n    \"currency\": \"USD\",\n    \"frequency\": \"yearly\"\n  },\n  \"manager\": \"Jane Smith\",\n  \"industry\": \"Technology\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/jobs",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "jobs"]
            },
            "description": "Create a new job record"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Job created successfully', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Save created job ID",
                  "if (pm.response.code === 201) {",
                  "  const jsonData = pm.response.json();",
                  "  if (jsonData.success && jsonData.data && jsonData.data.id) {",
                  "    pm.environment.set('jobId', jsonData.data.id);",
                  "    console.log('Job ID saved:', jsonData.data.id);",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Job",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/jobs/{{jobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "jobs", "{{jobId}}"]
            },
            "description": "Get a specific job by ID"
          },
          "response": []
        },
        {
          "name": "Update Job",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Lead Software Engineer\",\n  \"description\": \"Leading development of enterprise applications\",\n  \"achievements\": [\n    \"Improved system performance by 45%\",\n    \"Led successful migration to microservices\",\n    \"Delivered 5 major features ahead of schedule\"\n  ],\n  \"technologies\": [\"TypeScript\", \"React\", \"Node.js\", \"PostgreSQL\", \"Docker\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/jobs/{{jobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "jobs", "{{jobId}}"]
            },
            "description": "Update an existing job record"
          },
          "response": []
        },
        {
          "name": "Delete Job",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/jobs/{{jobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "jobs", "{{jobId}}"]
            },
            "description": "Delete a job record"
          },
          "response": []
        }
      ],
      "description": "Job management endpoints (formerly Work Experiences)"
    },
    {
      "name": "Education",
      "item": [
        {
          "name": "List Education",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/education?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "education"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all education records for a profile"
          },
          "response": []
        },
        {
          "name": "Create Education",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Master of Computer Science\",\n  \"description\": \"Focused on machine learning and distributed systems\",\n  \"institution\": \"Stanford University\",\n  \"degree\": \"Master of Science\",\n  \"field\": \"Computer Science\",\n  \"startDate\": \"2020-09-01\",\n  \"endDate\": \"2022-06-15\",\n  \"location\": \"Stanford, CA\",\n  \"gpa\": 3.85,\n  \"honors\": [\"Dean's List\", \"Graduate Fellowship\"],\n  \"relevantCourses\": [\n    \"Machine Learning\",\n    \"Distributed Systems\",\n    \"Advanced Algorithms\"\n  ],\n  \"projects\": [\n    \"Distributed ML Training Platform\",\n    \"Real-time Recommendation System\"\n  ],\n  \"activities\": [\"CS Graduate Student Association\", \"Research Assistant\"],\n  \"thesis\": \"Scalable Machine Learning on Edge Devices\",\n  \"advisor\": \"Dr. Jane Johnson\",\n  \"level\": \"masters\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/education",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "education"]
            },
            "description": "Create a new education record"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Education record created successfully', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Save created education ID",
                  "if (pm.response.code === 201) {",
                  "  const jsonData = pm.response.json();",
                  "  if (jsonData.success && jsonData.data && jsonData.data.id) {",
                  "    pm.environment.set('educationId', jsonData.data.id);",
                  "    console.log('Education ID saved:', jsonData.data.id);",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Education",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/education/{{educationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "education", "{{educationId}}"]
            },
            "description": "Get a specific education record by ID"
          },
          "response": []
        },
        {
          "name": "Update Education",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"gpa\": 3.9,\n  \"honors\": [\"Dean's List\", \"Graduate Fellowship\", \"Outstanding Research Award\"],\n  \"projects\": [\n    \"Distributed ML Training Platform\",\n    \"Real-time Recommendation System\",\n    \"Edge Computing Framework\"\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/education/{{educationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "education", "{{educationId}}"]
            },
            "description": "Update an existing education record"
          },
          "response": []
        },
        {
          "name": "Delete Education",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/education/{{educationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "education", "{{educationId}}"]
            },
            "description": "Delete an education record"
          },
          "response": []
        }
      ],
      "description": "Education record management endpoints"
    },
    {
      "name": "Projects",
      "item": [
        {
          "name": "List Projects",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/projects?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "projects"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all projects for a profile"
          },
          "response": []
        },
        {
          "name": "Create Project",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"E-commerce Platform\",\n  \"description\": \"Full-stack e-commerce platform with microservices architecture\",\n  \"status\": \"completed\",\n  \"startDate\": \"2023-03-01\",\n  \"endDate\": \"2023-08-15\",\n  \"technologies\": [\"React\", \"Node.js\", \"PostgreSQL\", \"Docker\", \"Kubernetes\"],\n  \"repositoryUrl\": \"https://github.com/user/ecommerce-platform\",\n  \"liveUrl\": \"https://ecommerce-platform.example.com\",\n  \"role\": \"Full-Stack Developer\",\n  \"teamSize\": 3,\n  \"keyFeatures\": [\n    \"User authentication and authorization\",\n    \"Product catalog with search and filtering\",\n    \"Shopping cart and checkout process\",\n    \"Payment integration with Stripe\",\n    \"Admin dashboard for inventory management\"\n  ],\n  \"challenges\": [\n    \"Implementing real-time inventory updates\",\n    \"Optimizing database queries for large product catalogs\",\n    \"Handling concurrent user sessions\"\n  ],\n  \"outcomes\": [\n    \"Successfully launched with 1000+ initial users\",\n    \"99.9% uptime achieved\",\n    \"Load testing passed for 10,000 concurrent users\"\n  ],\n  \"clientOrganization\": \"StartupXYZ\",\n  \"budget\": 50000,\n  \"projectType\": \"professional\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/projects",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "projects"]
            },
            "description": "Create a new project record"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Project created successfully', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Save created project ID",
                  "if (pm.response.code === 201) {",
                  "  const jsonData = pm.response.json();",
                  "  if (jsonData.success && jsonData.data && jsonData.data.id) {",
                  "    pm.environment.set('projectId', jsonData.data.id);",
                  "    console.log('Project ID saved:', jsonData.data.id);",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Project",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/projects/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "projects", "{{projectId}}"]
            },
            "description": "Get a specific project by ID"
          },
          "response": []
        },
        {
          "name": "Update Project",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"completed\",\n  \"endDate\": \"2023-08-15\",\n  \"outcomes\": [\n    \"Successfully launched with 1000+ initial users\",\n    \"99.9% uptime achieved\",\n    \"Load testing passed for 10,000 concurrent users\",\n    \"Featured in TechCrunch startup showcase\"\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/projects/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "projects", "{{projectId}}"]
            },
            "description": "Update an existing project record"
          },
          "response": []
        },
        {
          "name": "Delete Project",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/projects/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "projects", "{{projectId}}"]
            },
            "description": "Delete a project record"
          },
          "response": []
        }
      ],
      "description": "Project management endpoints"
    },
    {
      "name": "Actions",
      "item": [
        {
          "name": "List Actions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/actions?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "actions"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all action records for a profile"
          },
          "response": []
        },
        {
          "name": "Create Action",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Led Team Migration\",\n  \"description\": \"Successfully migrated entire team to new technology stack\",\n  \"category\": \"leadership\",\n  \"impact\": \"high\",\n  \"date\": \"2023-06-15\",\n  \"skills\": [\"leadership\", \"project management\", \"technical migration\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/actions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "actions"]
            },
            "description": "Create a new action record"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Action created successfully', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Save created action ID",
                  "if (pm.response.code === 201) {",
                  "  const jsonData = pm.response.json();",
                  "  if (jsonData.success && jsonData.data && jsonData.data.id) {",
                  "    pm.environment.set('actionId', jsonData.data.id);",
                  "    console.log('Action ID saved:', jsonData.data.id);",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Action",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/actions/{{actionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "actions", "{{actionId}}"]
            },
            "description": "Get a specific action by ID"
          },
          "response": []
        },
        {
          "name": "Update Action",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Led Team Migration to Modern Stack\",\n  \"description\": \"Successfully migrated entire team to new technology stack with zero downtime\",\n  \"impact\": \"very high\",\n  \"skills\": [\"leadership\", \"project management\", \"technical migration\", \"risk management\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/actions/{{actionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "actions", "{{actionId}}"]
            },
            "description": "Update an existing action record"
          },
          "response": []
        },
        {
          "name": "Delete Action",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/actions/{{actionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "actions", "{{actionId}}"]
            },
            "description": "Delete an action record"
          },
          "response": []
        }
      ],
      "description": "Action management endpoints for tracking career actions and achievements"
    },
    {
      "name": "Events",
      "item": [
        {
          "name": "List Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/events?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "events"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all event records for a profile"
          },
          "response": []
        },
        {
          "name": "Create Event",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"React Conference 2023\",\n  \"description\": \"Attended React conference and learned about new features\",\n  \"eventType\": \"conference\",\n  \"location\": \"San Francisco, CA\",\n  \"startDate\": \"2023-10-15\",\n  \"endDate\": \"2023-10-17\",\n  \"skills\": [\"React\", \"JavaScript\", \"web development\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/events",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "events"]
            },
            "description": "Create a new event record"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Event created successfully', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Save created event ID",
                  "if (pm.response.code === 201) {",
                  "  const jsonData = pm.response.json();",
                  "  if (jsonData.success && jsonData.data && jsonData.data.id) {",
                  "    pm.environment.set('eventId', jsonData.data.id);",
                  "    console.log('Event ID saved:', jsonData.data.id);",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Event",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "events", "{{eventId}}"]
            },
            "description": "Get a specific event by ID"
          },
          "response": []
        },
        {
          "name": "Update Event",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"React Conference 2023 - Advanced Track\",\n  \"description\": \"Attended React conference and learned about new features, participated in advanced workshops\",\n  \"skills\": [\"React\", \"JavaScript\", \"web development\", \"performance optimization\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "events", "{{eventId}}"]
            },
            "description": "Update an existing event record"
          },
          "response": []
        },
        {
          "name": "Delete Event",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "events", "{{eventId}}"]
            },
            "description": "Delete an event record"
          },
          "response": []
        }
      ],
      "description": "Event management endpoints for tracking conferences, workshops, and other career events"
    },
    {
      "name": "Career Transitions",
      "item": [
        {
          "name": "List Career Transitions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/career-transitions?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "career-transitions"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all career transition records for a profile"
          },
          "response": []
        },
        {
          "name": "Create Career Transition",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Senior Developer to Tech Lead\",\n  \"description\": \"Transitioned from individual contributor to technical leadership role\",\n  \"fromRole\": \"Senior Software Developer\",\n  \"toRole\": \"Tech Lead\",\n  \"transitionDate\": \"2023-01-15\",\n  \"skills\": [\"leadership\", \"mentoring\", \"architecture\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/career-transitions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "career-transitions"]
            },
            "description": "Create a new career transition record"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Career transition created successfully', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Save created career transition ID",
                  "if (pm.response.code === 201) {",
                  "  const jsonData = pm.response.json();",
                  "  if (jsonData.success && jsonData.data && jsonData.data.id) {",
                  "    pm.environment.set('careerTransitionId', jsonData.data.id);",
                  "    console.log('Career Transition ID saved:', jsonData.data.id);",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Career Transition",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/career-transitions/{{careerTransitionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "career-transitions", "{{careerTransitionId}}"]
            },
            "description": "Get a specific career transition by ID"
          },
          "response": []
        },
        {
          "name": "Update Career Transition",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Senior Developer to Tech Lead & Architect\",\n  \"description\": \"Transitioned from individual contributor to technical leadership and architecture role\",\n  \"skills\": [\"leadership\", \"mentoring\", \"architecture\", \"system design\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/career-transitions/{{careerTransitionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "career-transitions", "{{careerTransitionId}}"]
            },
            "description": "Update an existing career transition record"
          },
          "response": []
        },
        {
          "name": "Delete Career Transition",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/profiles/{{profileId}}/career-transitions/{{careerTransitionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "profiles", "{{profileId}}", "career-transitions", "{{careerTransitionId}}"]
            },
            "description": "Delete a career transition record"
          },
          "response": []
        }
      ],
      "description": "Career transition management endpoints for tracking role changes and promotions"
    }
  ]
}