/**
 * EducationService Tests
 * 
 * Comprehensive unit tests for EducationService business logic
 * with mocked repository dependencies covering:
 * - CRUD operations with validation
 * - Academic level and GPA validation
 * - Institution and degree verification
 * - Date validation for academic periods
 * - Skills extraction from coursework and activities
 * - Academic achievement tracking
 */

import { describe, it, expect, beforeEach, vi, type MockedFunction } from 'vitest';
import { EducationService } from '../education-service';
import type { Education } from '../../types/node-types';
import type { IRepository } from '../../core/interfaces/repository.interface';
import type { EducationCreateDTO, EducationUpdateDTO } from '@shared/schema';
import { ValidationError, NotFoundError, BusinessRuleError } from '../base-service';
import { NodeType } from '../../core/interfaces/base-node.interface';

// Mock repository
const mockRepository: IRepository<Education> = {
  findAll: vi.fn(),
  findById: vi.fn(),
  create: vi.fn(),
  update: vi.fn(),
  delete: vi.fn(),
};

describe('EducationService', () => {
  let service: EducationService;
  const mockProfileId = 1;

  beforeEach(() => {
    service = new EducationService(mockRepository);
    vi.clearAllMocks();
  });

  describe('getAll', () => {
    it('should return all education entries for a profile', async () => {
      const mockEducation: Education[] = [
        {
          id: 'edu-1',
          type: NodeType.Education,
          title: 'Bachelor of Science in Computer Science',
          institution: 'Stanford University',
          degree: 'Bachelor of Science',
          field: 'Computer Science',
          startDate: '2018-09-01',
          endDate: '2022-05-31',
          gpa: 3.8,
          level: 'bachelors',
          createdAt: '2018-09-01T00:00:00.000Z',
          updatedAt: '2022-05-31T00:00:00.000Z',
        },
      ];

      (mockRepository.findAll as MockedFunction<any>).mockResolvedValue(mockEducation);

      const result = await service.getAll(mockProfileId);

      expect(result).toEqual(mockEducation);
      expect(mockRepository.findAll).toHaveBeenCalledWith(mockProfileId);
    });

    it('should throw validation error for invalid profile ID', async () => {
      await expect(service.getAll(-1)).rejects.toThrow(ValidationError);
      await expect(service.getAll(0)).rejects.toThrow(ValidationError);
      await expect(service.getAll(1.5)).rejects.toThrow(ValidationError);
    });
  });

  describe('getById', () => {
    it('should return education by ID', async () => {
      const mockEducation: Education = {
        id: 'edu-1',
        type: NodeType.Education,
        title: 'Master of Science in Data Science',
        institution: 'MIT',
        degree: 'Master of Science',
        field: 'Data Science',
        startDate: '2022-09-01',
        endDate: '2024-05-31',
        gpa: 3.9,
        level: 'masters',
        createdAt: '2022-09-01T00:00:00.000Z',
        updatedAt: '2024-05-31T00:00:00.000Z',
      };

      (mockRepository.findById as MockedFunction<any>).mockResolvedValue(mockEducation);

      const result = await service.getById(mockProfileId, 'edu-1');

      expect(result).toEqual(mockEducation);
      expect(mockRepository.findById).toHaveBeenCalledWith(mockProfileId, 'edu-1');
    });

    it('should throw NotFoundError when education does not exist', async () => {
      (mockRepository.findById as MockedFunction<any>).mockResolvedValue(null);

      await expect(service.getById(mockProfileId, 'nonexistent')).rejects.toThrow(NotFoundError);
    });

    it('should throw validation error for invalid ID', async () => {
      await expect(service.getById(mockProfileId, '')).rejects.toThrow(ValidationError);
      await expect(service.getById(mockProfileId, '   ')).rejects.toThrow(ValidationError);
    });
  });

  describe('create', () => {
    const validCreateData: EducationCreateDTO = {
      title: 'Bachelor of Science in Software Engineering',
      institution: 'Carnegie Mellon University',
      degree: 'Bachelor of Science',
      field: 'Software Engineering',
      startDate: '2020-09-01',
      endDate: '2024-05-31',
      location: 'Pittsburgh, PA',
      gpa: 3.7,
      level: 'bachelors',
      honors: ['Dean\\'s List'],
      relevantCourses: [\n        'Data Structures and Algorithms',\n        'Software Architecture',\n        'Machine Learning'\n      ],\n      activities: ['Programming Club', 'Research Assistant'],\n    };\n\n    it('should create a new education entry successfully', async () => {\n      const createdEducation: Education = {\n        id: 'edu-new',\n        type: NodeType.Education,\n        ...validCreateData,\n        createdAt: '2020-09-01T00:00:00.000Z',\n        updatedAt: '2020-09-01T00:00:00.000Z',\n      };\n\n      (mockRepository.create as MockedFunction<any>).mockResolvedValue(createdEducation);\n\n      const result = await service.create(mockProfileId, validCreateData);\n\n      expect(result).toEqual(createdEducation);\n      expect(mockRepository.create).toHaveBeenCalledWith(\n        mockProfileId,\n        expect.objectContaining({\n          type: NodeType.Education,\n          title: validCreateData.title,\n          institution: validCreateData.institution,\n          degree: validCreateData.degree,\n          field: validCreateData.field,\n        })\n      );\n    });\n\n    it('should extract skills from coursework and activities', async () => {\n      const dataWithSkills: EducationCreateDTO = {\n        ...validCreateData,\n        relevantCourses: [\n          'Advanced JavaScript Programming',\n          'Python for Data Science',\n          'Database Design and SQL'\n        ],\n        activities: ['Coding bootcamp mentor', 'React.js workshop organizer'],\n        thesis: 'Machine Learning applications in web development using TensorFlow',\n      };\n\n      const createdEducation: Education = {\n        id: 'edu-new',\n        type: NodeType.Education,\n        ...dataWithSkills,\n        skills: ['javascript', 'python', 'sql', 'react', 'machine learning', 'tensorflow'],\n        createdAt: '2020-09-01T00:00:00.000Z',\n        updatedAt: '2020-09-01T00:00:00.000Z',\n      };\n\n      (mockRepository.create as MockedFunction<any>).mockResolvedValue(createdEducation);\n\n      const result = await service.create(mockProfileId, dataWithSkills);\n\n      expect(result.skills).toContain('javascript');\n      expect(result.skills).toContain('python');\n      expect(result.skills).toContain('react');\n      expect(result.skills).toContain('machine learning');\n    });\n\n    it('should throw validation error for missing required fields', async () => {\n      const invalidData = { ...validCreateData, title: '' };\n      await expect(service.create(mockProfileId, invalidData)).rejects.toThrow(ValidationError);\n\n      const invalidData2 = { ...validCreateData, institution: '' };\n      await expect(service.create(mockProfileId, invalidData2)).rejects.toThrow(ValidationError);\n    });\n\n    it('should throw validation error for invalid GPA', async () => {\n      const invalidGPAData = {\n        ...validCreateData,\n        gpa: 5.0, // Invalid GPA > 4.0\n      };\n\n      await expect(service.create(mockProfileId, invalidGPAData)).rejects.toThrow(ValidationError);\n\n      const negativeGPAData = {\n        ...validCreateData,\n        gpa: -1.0, // Negative GPA\n      };\n\n      await expect(service.create(mockProfileId, negativeGPAData)).rejects.toThrow(ValidationError);\n    });\n\n    it('should throw validation error for invalid date logic', async () => {\n      const invalidDateData = {\n        ...validCreateData,\n        startDate: '2024-12-31',\n        endDate: '2020-01-01', // End before start\n      };\n\n      await expect(service.create(mockProfileId, invalidDateData)).rejects.toThrow(ValidationError);\n    });\n\n    it('should validate academic level consistency', async () => {\n      const invalidLevelData = {\n        ...validCreateData,\n        degree: 'PhD', // Doctorate degree\n        level: 'bachelors', // But bachelors level - inconsistent\n      };\n\n      await expect(service.create(mockProfileId, invalidLevelData)).rejects.toThrow(ValidationError);\n    });\n\n    it('should handle expected graduation for current students', async () => {\n      const currentStudentData = {\n        ...validCreateData,\n        endDate: undefined, // Currently enrolled\n        expectedGraduation: '2025-05-31',\n        level: 'masters',\n      };\n\n      const createdEducation: Education = {\n        id: 'edu-current',\n        type: NodeType.Education,\n        ...currentStudentData,\n        createdAt: '2024-01-01T00:00:00.000Z',\n        updatedAt: '2024-01-01T00:00:00.000Z',\n      };\n\n      (mockRepository.create as MockedFunction<any>).mockResolvedValue(createdEducation);\n\n      const result = await service.create(mockProfileId, currentStudentData);\n\n      expect(result.endDate).toBeUndefined();\n      expect(result.expectedGraduation).toBe('2025-05-31');\n    });\n  });\n\n  describe('update', () => {\n    const existingEducation: Education = {\n      id: 'edu-1',\n      type: NodeType.Education,\n      title: 'Bachelor of Computer Science',\n      institution: 'State University',\n      degree: 'Bachelor of Science',\n      field: 'Computer Science',\n      startDate: '2018-09-01',\n      endDate: '2022-05-31',\n      gpa: 3.5,\n      level: 'bachelors',\n      createdAt: '2018-09-01T00:00:00.000Z',\n      updatedAt: '2018-09-01T00:00:00.000Z',\n    };\n\n    const validUpdateData: EducationUpdateDTO = {\n      title: 'Bachelor of Science in Computer Science',\n      gpa: 3.8,\n      honors: ['Magna Cum Laude', 'Dean\\'s List'],\n    };\n\n    beforeEach(() => {\n      (mockRepository.findById as MockedFunction<any>).mockResolvedValue(existingEducation);\n    });\n\n    it('should update education successfully', async () => {\n      const updatedEducation = {\n        ...existingEducation,\n        ...validUpdateData,\n        updatedAt: '2024-01-01T00:00:00.000Z',\n      };\n\n      (mockRepository.update as MockedFunction<any>).mockResolvedValue(updatedEducation);\n\n      const result = await service.update(mockProfileId, 'edu-1', validUpdateData);\n\n      expect(result).toEqual(updatedEducation);\n      expect(mockRepository.update).toHaveBeenCalledWith(\n        mockProfileId,\n        'edu-1',\n        expect.objectContaining({\n          ...validUpdateData,\n          updatedAt: expect.any(String),\n        })\n      );\n    });\n\n    it('should throw NotFoundError when education does not exist', async () => {\n      (mockRepository.findById as MockedFunction<any>).mockResolvedValue(null);\n\n      await expect(service.update(mockProfileId, 'nonexistent', validUpdateData))\n        .rejects.toThrow(NotFoundError);\n    });\n\n    it('should throw validation error for invalid GPA in updates', async () => {\n      const invalidUpdateData = { gpa: 6.0 }; // Invalid GPA\n      await expect(service.update(mockProfileId, 'edu-1', invalidUpdateData))\n        .rejects.toThrow(ValidationError);\n    });\n\n    it('should handle graduation status updates', async () => {\n      const graduationUpdate = {\n        endDate: '2022-05-31',\n        graduationStatus: 'graduated',\n        finalGPA: 3.8,\n        honors: ['Summa Cum Laude'],\n      };\n\n      const updatedEducation = {\n        ...existingEducation,\n        ...graduationUpdate,\n        updatedAt: '2024-01-01T00:00:00.000Z',\n      };\n\n      (mockRepository.update as MockedFunction<any>).mockResolvedValue(updatedEducation);\n\n      const result = await service.update(mockProfileId, 'edu-1', graduationUpdate);\n\n      expect(result.graduationStatus).toBe('graduated');\n      expect(result.finalGPA).toBe(3.8);\n    });\n  });\n\n  describe('delete', () => {\n    const existingEducation: Education = {\n      id: 'edu-1',\n      type: NodeType.Education,\n      title: 'Certificate Program',\n      institution: 'Online University',\n      degree: 'Certificate',\n      level: 'certificate',\n      createdAt: '2023-01-01T00:00:00.000Z',\n      updatedAt: '2023-01-01T00:00:00.000Z',\n    };\n\n    it('should delete education successfully', async () => {\n      (mockRepository.findById as MockedFunction<any>).mockResolvedValue(existingEducation);\n      (mockRepository.delete as MockedFunction<any>).mockResolvedValue(true);\n\n      await service.delete(mockProfileId, 'edu-1');\n\n      expect(mockRepository.delete).toHaveBeenCalledWith(mockProfileId, 'edu-1');\n    });\n\n    it('should throw NotFoundError when education does not exist', async () => {\n      (mockRepository.findById as MockedFunction<any>).mockResolvedValue(null);\n\n      await expect(service.delete(mockProfileId, 'nonexistent')).rejects.toThrow(NotFoundError);\n    });\n  });\n\n  describe('academic level and institution queries', () => {\n    const mockEducationEntries: Education[] = [\n      {\n        id: 'edu-1',\n        type: NodeType.Education,\n        title: 'High School Diploma',\n        institution: 'Central High School',\n        degree: 'High School Diploma',\n        level: 'high-school',\n        startDate: '2014-09-01',\n        endDate: '2018-06-15',\n        createdAt: '2014-09-01T00:00:00.000Z',\n        updatedAt: '2018-06-15T00:00:00.000Z',\n      },\n      {\n        id: 'edu-2',\n        type: NodeType.Education,\n        title: 'Bachelor of Science in Computer Science',\n        institution: 'State University',\n        degree: 'Bachelor of Science',\n        field: 'Computer Science',\n        level: 'bachelors',\n        startDate: '2018-09-01',\n        endDate: '2022-05-31',\n        gpa: 3.7,\n        createdAt: '2018-09-01T00:00:00.000Z',\n        updatedAt: '2022-05-31T00:00:00.000Z',\n      },\n      {\n        id: 'edu-3',\n        type: NodeType.Education,\n        title: 'Master of Science in Data Science',\n        institution: 'Tech University',\n        degree: 'Master of Science',\n        field: 'Data Science',\n        level: 'masters',\n        startDate: '2022-09-01',\n        gpa: 3.9,\n        createdAt: '2022-09-01T00:00:00.000Z',\n        updatedAt: '2022-09-01T00:00:00.000Z',\n      },\n    ];\n\n    beforeEach(() => {\n      (mockRepository.findAll as MockedFunction<any>).mockResolvedValue(mockEducationEntries);\n    });\n\n    describe('getByLevel', () => {\n      it('should return education by academic level', async () => {\n        const result = await service.getByLevel(mockProfileId, 'bachelors');\n\n        expect(result).toHaveLength(1);\n        expect(result[0].level).toBe('bachelors');\n        expect(result[0].degree).toBe('Bachelor of Science');\n      });\n\n      it('should return graduate-level education', async () => {\n        const result = await service.getByLevel(mockProfileId, 'masters');\n\n        expect(result).toHaveLength(1);\n        expect(result[0].level).toBe('masters');\n        expect(result[0].field).toBe('Data Science');\n      });\n    });\n\n    describe('getByInstitution', () => {\n      it('should find education by institution', async () => {\n        const result = await service.getByInstitution(mockProfileId, 'State University');\n\n        expect(result).toHaveLength(1);\n        expect(result[0].institution).toBe('State University');\n      });\n\n      it('should perform case-insensitive institution search', async () => {\n        const result = await service.getByInstitution(mockProfileId, 'state university');\n\n        expect(result).toHaveLength(1);\n        expect(result[0].institution).toBe('State University');\n      });\n    });\n\n    describe('getByField', () => {\n      it('should find education by field of study', async () => {\n        const result = await service.getByField(mockProfileId, 'Computer Science');\n\n        expect(result).toHaveLength(1);\n        expect(result[0].field).toBe('Computer Science');\n      });\n\n      it('should find related fields', async () => {\n        const result = await service.getByField(mockProfileId, 'Data');\n\n        expect(result).toHaveLength(1);\n        expect(result[0].field).toBe('Data Science');\n      });\n    });\n\n    describe('getCurrent', () => {\n      it('should return current education (no end date)', async () => {\n        const currentEducation = {\n          ...mockEducationEntries[2],\n          endDate: undefined, // Currently enrolled\n          expectedGraduation: '2024-05-31',\n        };\n\n        const educationWithCurrent = [...mockEducationEntries.slice(0, 2), currentEducation];\n        (mockRepository.findAll as MockedFunction<any>).mockResolvedValue(educationWithCurrent);\n\n        const result = await service.getCurrent(mockProfileId);\n\n        expect(result).toHaveLength(1);\n        expect(result[0].endDate).toBeUndefined();\n        expect(result[0].expectedGraduation).toBe('2024-05-31');\n      });\n    });\n\n    describe('getCompleted', () => {\n      it('should return completed education only', async () => {\n        const result = await service.getCompleted(mockProfileId);\n\n        expect(result).toHaveLength(2); // High school and bachelor's (master's has no end date in original data)\n        expect(result.every(edu => edu.endDate !== undefined)).toBe(true);\n      });\n    });\n  });\n\n  describe('academic achievements and GPA analysis', () => {\n    const educationWithAchievements: Education[] = [\n      {\n        id: 'edu-high-gpa',\n        type: NodeType.Education,\n        title: 'Bachelor of Science',\n        institution: 'Elite University',\n        degree: 'Bachelor of Science',\n        level: 'bachelors',\n        gpa: 3.9,\n        honors: ['Summa Cum Laude', 'Phi Beta Kappa'],\n        createdAt: '2020-01-01T00:00:00.000Z',\n        updatedAt: '2024-01-01T00:00:00.000Z',\n      },\n      {\n        id: 'edu-medium-gpa',\n        type: NodeType.Education,\n        title: 'Master of Arts',\n        institution: 'Good University',\n        degree: 'Master of Arts',\n        level: 'masters',\n        gpa: 3.5,\n        honors: ['Dean\\'s List'],\n        createdAt: '2021-01-01T00:00:00.000Z',\n        updatedAt: '2023-01-01T00:00:00.000Z',\n      },\n    ];\n\n    beforeEach(() => {\n      (mockRepository.findAll as MockedFunction<any>).mockResolvedValue(educationWithAchievements);\n    });\n\n    describe('getWithHonors', () => {\n      it('should return education entries with honors', async () => {\n        const result = await service.getWithHonors(mockProfileId);\n\n        expect(result).toHaveLength(2);\n        expect(result.every(edu => edu.honors && edu.honors.length > 0)).toBe(true);\n      });\n    });\n\n    describe('getByMinimumGPA', () => {\n      it('should return education with GPA above threshold', async () => {\n        const result = await service.getByMinimumGPA(mockProfileId, 3.7);\n\n        expect(result).toHaveLength(1);\n        expect(result[0].gpa).toBe(3.9);\n      });\n\n      it('should return all education for low threshold', async () => {\n        const result = await service.getByMinimumGPA(mockProfileId, 3.0);\n\n        expect(result).toHaveLength(2);\n      });\n    });\n\n    describe('calculateOverallGPA', () => {\n      it('should calculate weighted average GPA', async () => {\n        const overallGPA = await service.calculateOverallGPA(mockProfileId);\n\n        expect(overallGPA).toBeCloseTo(3.7, 1); // Weighted average\n      });\n\n      it('should handle education without GPA', async () => {\n        const educationWithoutGPA = [\n          ...educationWithAchievements,\n          {\n            id: 'edu-no-gpa',\n            type: NodeType.Education,\n            title: 'Certificate',\n            institution: 'Training Center',\n            degree: 'Certificate',\n            level: 'certificate',\n            createdAt: '2023-01-01T00:00:00.000Z',\n            updatedAt: '2023-01-01T00:00:00.000Z',\n          } as Education,\n        ];\n\n        (mockRepository.findAll as MockedFunction<any>).mockResolvedValue(educationWithoutGPA);\n\n        const overallGPA = await service.calculateOverallGPA(mockProfileId);\n        expect(overallGPA).toBeGreaterThan(0);\n      });\n    });\n  });\n\n  describe('date validation and academic periods', () => {\n    describe('validateAcademicDates', () => {\n      it('should validate correct academic date sequences', async () => {\n        const result = await service.validateAcademicDates('2020-09-01', '2024-05-31');\n        expect(result.valid).toBe(true);\n      });\n\n      it('should validate current enrollment (no end date)', async () => {\n        const result = await service.validateAcademicDates('2022-09-01', undefined, '2025-05-31');\n        expect(result.valid).toBe(true);\n        expect(result.isCurrent).toBe(true);\n      });\n\n      it('should reject invalid date sequences', async () => {\n        const result = await service.validateAcademicDates('2024-12-31', '2020-01-01');\n        expect(result.valid).toBe(false);\n        expect(result.error).toContain('before end date');\n      });\n\n      it('should validate realistic academic duration', async () => {\n        // PhD program - very long duration should be valid\n        const longResult = await service.validateAcademicDates('2018-09-01', '2025-05-31');\n        expect(longResult.valid).toBe(true);\n\n        // Unrealistically short duration should trigger warning\n        const shortResult = await service.validateAcademicDates('2023-12-01', '2024-01-01');\n        expect(shortResult.warnings).toContain('unusually short');\n      });\n    });\n  });\n\n  describe('skills extraction and academic analysis', () => {\n    describe('extractSkillsFromEducation', () => {\n      it('should extract technical skills from courses and thesis', async () => {\n        const educationData = {\n          relevantCourses: [\n            'Advanced JavaScript and React Development',\n            'Python Machine Learning with TensorFlow',\n            'Database Design using PostgreSQL and MongoDB'\n          ],\n          thesis: 'Deep Learning applications in Natural Language Processing using PyTorch',\n          activities: ['Google Summer of Code participant', 'AI research lab assistant']\n        };\n\n        const skills = await service.extractSkillsFromEducation(educationData);\n\n        expect(skills).toContain('javascript');\n        expect(skills).toContain('react');\n        expect(skills).toContain('python');\n        expect(skills).toContain('machine learning');\n        expect(skills).toContain('tensorflow');\n        expect(skills).toContain('postgresql');\n        expect(skills).toContain('pytorch');\n        expect(skills).toContain('natural language processing');\n      });\n\n      it('should handle education data without extractable skills', async () => {\n        const educationData = {\n          relevantCourses: ['Introduction to Business', 'Marketing Fundamentals'],\n        };\n\n        const skills = await service.extractSkillsFromEducation(educationData);\n\n        expect(skills).toContain('business');\n        expect(skills).toContain('marketing');\n      });\n    });\n\n    describe('getEducationProgression', () => {\n      it('should analyze educational progression and career readiness', async () => {\n        const progression = await service.getEducationProgression(mockProfileId);\n\n        expect(progression).toEqual(expect.objectContaining({\n          educationLevel: expect.any(String),\n          totalYearsOfEducation: expect.any(Number),\n          fieldSpecialization: expect.any(Array),\n          gpaProgression: expect.any(Array),\n          skillsDeveloped: expect.any(Array),\n          careerReadiness: expect.any(Number),\n        }));\n      });\n    });\n  });\n\n  describe('business rules and validation', () => {\n    describe('academic integrity checks', () => {\n      it('should detect overlapping education periods', async () => {\n        const overlappingEducation = [\n          {\n            id: 'edu-1',\n            type: NodeType.Education,\n            title: 'Bachelor Program 1',\n            institution: 'University A',\n            startDate: '2020-09-01',\n            endDate: '2024-05-31',\n            level: 'bachelors',\n            createdAt: '2020-01-01T00:00:00Z',\n            updatedAt: '2020-01-01T00:00:00Z',\n          },\n          {\n            id: 'edu-2',\n            type: NodeType.Education,\n            title: 'Bachelor Program 2',\n            institution: 'University B',\n            startDate: '2022-09-01', // Overlaps with first program\n            endDate: '2026-05-31',\n            level: 'bachelors',\n            createdAt: '2022-01-01T00:00:00Z',\n            updatedAt: '2022-01-01T00:00:00Z',\n          },\n        ] as Education[];\n\n        (mockRepository.findAll as MockedFunction<any>).mockResolvedValue(overlappingEducation);\n\n        const overlaps = await service.checkForOverlappingEducation(mockProfileId);\n\n        expect(overlaps).toHaveLength(2);\n        expect(overlaps.map(edu => edu.id)).toContain('edu-1');\n        expect(overlaps.map(edu => edu.id)).toContain('edu-2');\n      });\n\n      it('should validate prerequisite education levels', async () => {\n        // Masters without bachelor's should trigger warning\n        const invalidProgression = {\n          title: 'Master of Science',\n          institution: 'University',\n          degree: 'Master of Science',\n          level: 'masters',\n        };\n\n        // Mock no previous bachelor's degree\n        (mockRepository.findAll as MockedFunction<any>).mockResolvedValue([]);\n\n        await expect(service.validateEducationProgression(mockProfileId, invalidProgression))\n          .rejects.toThrow(BusinessRuleError);\n      });\n    });\n  });\n\n  describe('error handling and edge cases', () => {\n    it('should handle repository errors gracefully', async () => {\n      (mockRepository.findAll as MockedFunction<any>).mockRejectedValue(new Error('Database error'));\n\n      await expect(service.getAll(mockProfileId)).rejects.toThrow('Database error');\n    });\n\n    it('should handle malformed education data', async () => {\n      const malformedData = {\n        title: 'Valid Title',\n        institution: 'Valid Institution',\n        gpa: 'invalid-gpa', // Should be number\n      } as any;\n\n      await expect(service.create(mockProfileId, malformedData))\n        .rejects.toThrow(ValidationError);\n    });\n\n    it('should handle empty or null values gracefully', async () => {\n      const dataWithNulls = {\n        title: 'Test Education',\n        institution: 'Test University',\n        degree: null,\n        field: undefined,\n        gpa: null,\n      } as any;\n\n      const createdEducation: Education = {\n        id: 'edu-test',\n        type: NodeType.Education,\n        title: 'Test Education',\n        institution: 'Test University',\n        createdAt: '2024-01-01T00:00:00.000Z',\n        updatedAt: '2024-01-01T00:00:00.000Z',\n      };\n\n      (mockRepository.create as MockedFunction<any>).mockResolvedValue(createdEducation);\n\n      const result = await service.create(mockProfileId, dataWithNulls);\n      expect(result).toBeDefined();\n      expect(result.title).toBe('Test Education');\n    });\n  });\n});"